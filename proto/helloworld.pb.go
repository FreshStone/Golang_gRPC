// Code generated by protoc-gen-go. DO NOT EDIT.
// source: helloworld.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Void struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_17b8c58d586b62f2, []int{0}
}

func (m *Void) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Void.Unmarshal(m, b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Void.Marshal(b, m, deterministic)
}
func (m *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(m, src)
}
func (m *Void) XXX_Size() int {
	return xxx_messageInfo_Void.Size(m)
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

type ServerTime struct {
	Time                 *Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Hostname             string     `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ServerTime) Reset()         { *m = ServerTime{} }
func (m *ServerTime) String() string { return proto.CompactTextString(m) }
func (*ServerTime) ProtoMessage()    {}
func (*ServerTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_17b8c58d586b62f2, []int{1}
}

func (m *ServerTime) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerTime.Unmarshal(m, b)
}
func (m *ServerTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerTime.Marshal(b, m, deterministic)
}
func (m *ServerTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerTime.Merge(m, src)
}
func (m *ServerTime) XXX_Size() int {
	return xxx_messageInfo_ServerTime.Size(m)
}
func (m *ServerTime) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerTime.DiscardUnknown(m)
}

var xxx_messageInfo_ServerTime proto.InternalMessageInfo

func (m *ServerTime) GetTime() *Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *ServerTime) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

type Request struct {
	Txt                  string   `protobuf:"bytes,1,opt,name=txt,proto3" json:"txt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_17b8c58d586b62f2, []int{2}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetTxt() string {
	if m != nil {
		return m.Txt
	}
	return ""
}

type Response struct {
	Txt                  string   `protobuf:"bytes,1,opt,name=txt,proto3" json:"txt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_17b8c58d586b62f2, []int{3}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetTxt() string {
	if m != nil {
		return m.Txt
	}
	return ""
}

func init() {
	proto.RegisterType((*Void)(nil), "grpc.Void")
	proto.RegisterType((*ServerTime)(nil), "grpc.ServerTime")
	proto.RegisterType((*Request)(nil), "grpc.Request")
	proto.RegisterType((*Response)(nil), "grpc.Response")
}

func init() { proto.RegisterFile("helloworld.proto", fileDescriptor_17b8c58d586b62f2) }

var fileDescriptor_17b8c58d586b62f2 = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x4f, 0xbb, 0x4e, 0xc3, 0x30,
	0x14, 0x6d, 0xc0, 0xea, 0xe3, 0x22, 0x68, 0xe4, 0xa9, 0x32, 0x0c, 0x95, 0x19, 0x28, 0x4b, 0x10,
	0xe1, 0x1b, 0x18, 0x59, 0x4c, 0xc5, 0x5e, 0x9a, 0xab, 0x24, 0x52, 0x9c, 0x6b, 0xec, 0xcb, 0xe3,
	0xf3, 0x91, 0x6d, 0x02, 0x03, 0x93, 0xcf, 0xf1, 0x79, 0xd8, 0x07, 0xca, 0x0e, 0x87, 0x81, 0x3e,
	0xc9, 0x0f, 0x4d, 0xe5, 0x3c, 0x31, 0x49, 0xd1, 0x7a, 0x77, 0x54, 0x6b, 0xee, 0x2d, 0x06, 0x3e,
	0x58, 0x97, 0xaf, 0xf5, 0x1c, 0xc4, 0x0b, 0xf5, 0x8d, 0x7e, 0x02, 0x78, 0x46, 0xff, 0x81, 0x7e,
	0xdf, 0x5b, 0x94, 0xd7, 0x20, 0xa2, 0x71, 0x53, 0x6c, 0x8b, 0xdd, 0x59, 0xbd, 0xae, 0x62, 0xb6,
	0xda, 0x4f, 0x51, 0x93, 0x44, 0xa9, 0x60, 0xd9, 0x51, 0xe0, 0xf1, 0x60, 0x71, 0x73, 0xb2, 0x2d,
	0x76, 0x2b, 0xf3, 0xcb, 0xf5, 0x25, 0x2c, 0x0c, 0xbe, 0xbd, 0x63, 0x60, 0x59, 0xc2, 0x29, 0x7f,
	0x71, 0xaa, 0x5a, 0x99, 0x08, 0xf5, 0x15, 0x2c, 0x0d, 0x06, 0x47, 0x63, 0xc0, 0xff, 0x6a, 0x7d,
	0x07, 0xe2, 0xf1, 0xd8, 0x91, 0xbc, 0x01, 0x81, 0xf1, 0x3c, 0xcf, 0xaf, 0xff, 0xd4, 0xa9, 0x8b,
	0x89, 0xe6, 0x02, 0x3d, 0xab, 0xef, 0x41, 0xa4, 0x4f, 0xdf, 0xc2, 0xa2, 0x45, 0x4e, 0x10, 0xb2,
	0x29, 0x2e, 0x53, 0x65, 0xc6, 0x7f, 0xeb, 0xf4, 0xec, 0x75, 0x9e, 0xc6, 0x3f, 0x7c, 0x07, 0x00,
	0x00, 0xff, 0xff, 0x8f, 0xb0, 0x7f, 0xa0, 0x27, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EchoClient is the client API for Echo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoClient interface {
	Echo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type echoClient struct {
	cc *grpc.ClientConn
}

func NewEchoClient(cc *grpc.ClientConn) EchoClient {
	return &echoClient{cc}
}

func (c *echoClient) Echo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.Echo/echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoServer is the server API for Echo service.
type EchoServer interface {
	Echo(context.Context, *Request) (*Response, error)
}

func RegisterEchoServer(s *grpc.Server, srv EchoServer) {
	s.RegisterService(&_Echo_serviceDesc, srv)
}

func _Echo_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Echo/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).Echo(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Echo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Echo",
	HandlerType: (*EchoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "echo",
			Handler:    _Echo_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld.proto",
}

// TimeClient is the client API for Time service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TimeClient interface {
	GetTime(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ServerTime, error)
}

type timeClient struct {
	cc *grpc.ClientConn
}

func NewTimeClient(cc *grpc.ClientConn) TimeClient {
	return &timeClient{cc}
}

func (c *timeClient) GetTime(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ServerTime, error) {
	out := new(ServerTime)
	err := c.cc.Invoke(ctx, "/grpc.Time/getTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeServer is the server API for Time service.
type TimeServer interface {
	GetTime(context.Context, *Void) (*ServerTime, error)
}

func RegisterTimeServer(s *grpc.Server, srv TimeServer) {
	s.RegisterService(&_Time_serviceDesc, srv)
}

func _Time_GetTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeServer).GetTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Time/GetTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeServer).GetTime(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _Time_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Time",
	HandlerType: (*TimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getTime",
			Handler:    _Time_GetTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld.proto",
}
